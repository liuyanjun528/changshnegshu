package com.annaru.upms.handle.webservice;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import java.net.MalformedURLException;
import java.net.URL;

/**
 * This class was generated by Apache CXF 3.2.3
 * 2019-05-17T18:53:41.524+08:00
 * Generated source version: 3.2.3
 */
@WebServiceClient(name = "LisWebService", wsdlLocation = "http://www.cbml.com.cn:8997/LisWebService.asmx?wsdl", targetNamespace = "http://tempuri.org/")
public class LisWebService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://tempuri.org/", "LisWebService");
    public final static QName LisWebServiceSoap12 = new QName("http://tempuri.org/", "LisWebServiceSoap12");
    public final static QName LisWebServiceSoap = new QName("http://tempuri.org/", "LisWebServiceSoap");

    static {
        URL url = null;
        try {
            url = new URL("http://www.cbml.com.cn:8997/LisWebService.asmx?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(LisWebService.class.getName()).log(java.util.logging.Level.INFO,
                    "Can not initialize the default wsdl from {0}", "http://www.cbml.com.cn:8997/LisWebService.asmx?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public LisWebService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public LisWebService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public LisWebService() {
        super(WSDL_LOCATION, SERVICE);
    }

    public LisWebService(WebServiceFeature... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public LisWebService(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public LisWebService(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }


    /**
     * @return returns LisWebServiceSoap
     */
    @WebEndpoint(name = "LisWebServiceSoap12")
    public LisWebServiceSoap getLisWebServiceSoap12() {
        return super.getPort(LisWebServiceSoap12, LisWebServiceSoap.class);
    }

    /**
     * @param features A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return returns LisWebServiceSoap
     */
    @WebEndpoint(name = "LisWebServiceSoap12")
    public LisWebServiceSoap getLisWebServiceSoap12(WebServiceFeature... features) {
        return super.getPort(LisWebServiceSoap12, LisWebServiceSoap.class, features);
    }


    /**
     * @return returns LisWebServiceSoap
     */
    @WebEndpoint(name = "LisWebServiceSoap")
    public LisWebServiceSoap getLisWebServiceSoap() {
        return super.getPort(LisWebServiceSoap, LisWebServiceSoap.class);
    }

    /**
     * @param features A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return returns LisWebServiceSoap
     */
    @WebEndpoint(name = "LisWebServiceSoap")
    public LisWebServiceSoap getLisWebServiceSoap(WebServiceFeature... features) {
        return super.getPort(LisWebServiceSoap, LisWebServiceSoap.class, features);
    }

}
