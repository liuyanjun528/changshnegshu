
package com.annaru.upms.webservice;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import com.annaru.upms.entity.*;
import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.xml.namespace.QName;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * This class was generated by Apache CXF 3.2.3
 * 2019-05-17T18:53:41.483+08:00
 * Generated source version: 3.2.3
 */
public final class LisWebServiceSoap12_Client {
    private static final Logger logger = LoggerFactory.getLogger(LisWebServiceSoap12_Client.class);

    private static final QName SERVICE_NAME = new QName("http://tempuri.org/", "LisWebService");

    /**
     * @Description: 发送 webService 请求
     * @param _cmlDataTrans_webcmd 接口命令字(服务名称)
     * @param reqData 输入参数
     * @Author: XCK
     * @Date: 2019/5/20
     * @return Map<String, Object>
     */
    public static Map<String, Object> sendRequest(String _cmlDataTrans_webcmd, Map<String, String> reqData) throws Exception {
        URL wsdlURL = LisWebService.WSDL_LOCATION;
        LisWebService lisWebService = new LisWebService(wsdlURL, SERVICE_NAME);
        LisWebServiceSoap port = lisWebService.getLisWebServiceSoap12();
        String _cmlDataTrans_params = WebServiceXmlUtil.mapToXml(reqData);
        System.out.println("Invoking cmlDataTrans...");
        String _cmlDataTrans__return = port.cmlDataTrans(_cmlDataTrans_webcmd, _cmlDataTrans_params);
        System.out.println("cmlDataTrans.result=" + _cmlDataTrans__return);
        Map<String, Object> resData = WebServiceXmlUtil.xmlToMap(_cmlDataTrans__return);
        return resData;
    }

    public static Map<String, Object> Login(String LogID, String LogPass) {
        try {
            Map<String, String> reqData = new HashMap<>();
            reqData.put("LogID", LogID);
            reqData.put("LogPass", LogPass);
            Map<String, Object> resData = LisWebServiceSoap12_Client.sendRequest("Login", reqData);
            if ("0".equals(resData.get("RESULTCODE"))) {
                Object results = resData.get("RESULTS");
                if (results instanceof Map) {
                    return  (Map<String, Object>) results;
                }
            }
        } catch (Exception e) {
            logger.error(e.getMessage());
        }
        return null;
    }

    /**
     * @Description: 获得报告单列表并下载
     * @param  Token 访问口令 NOT NULL
     * @param LogID 机构代码 NOT NULL
     * @param AppCode 申请机构代码 NOT NULL
     * @param ExeCode 指定执行机构代码
     * @param StartDate 开始申请日期（yyyy-MM-dd） NOT NULL
     * @param EndDate 截止申请日期（yyyy-MM-dd）
     * @param AppBarcode 申请机构条码
     * @param ExeBarcode 执行机构条码
     * @param ReportType 报告类型（1-临床检验报告；2-病理组织报告；3-TCT；4-微生物报告；9-其他报告）
     * @param DataFlag 是否包含已经下载的数据 （0-不包含；1-包含）NOT NULL
     * @Author: XCK
     * @Date: 2019/5/22
     * @return List<ExamInspectReportList>
     */
    public static List<ExamInspectReportList> GetResultLists(String Token, String LogID, String AppCode, String ExeCode,
                                                             String StartDate, String EndDate, String AppBarcode,
                                                             String ExeBarcode, String ReportType, String DataFlag) {
        List<ExamInspectReportList> reportLists = null;
        try {
            Map<String, String> params = new HashMap<>();
            params.put("Token", Token);
            params.put("LogID", LogID);
            params.put("AppCode", AppCode);
            params.put("ExeCode", ExeCode);
            params.put("AppBarcode", AppBarcode);
            params.put("ExeBarcode", ExeBarcode);
            params.put("StartDate", StartDate);
            params.put("EndDate", EndDate);
            params.put("ReportType", ReportType);
            params.put("DataFlag", DataFlag);

            Map<String, Object> resData = LisWebServiceSoap12_Client.sendRequest("GetResultLists", params);

            // 请求响应码不为 “0” （请求失败）
            if(!("0".equals(resData.get("RESULTCODE")))){ return reportLists; }

            List<Map<String, Object>> results = (List) resData.get("RESULTS");

            // 判断返回结果集 results 是否为空
            if (CollectionUtils.isEmpty(results)) { return reportLists; }

            reportLists = new ArrayList<>();
            for (Map<String, Object> result : results) {
                String reportNo = (String) result.get("REPORTNO");
                if(StringUtils.isBlank(reportNo)){
                    continue;
                }
                ExamInspectReportList inspectReportList = new ExamInspectReportList();
                BeanUtils.populate(inspectReportList, result);
                inspectReportList.setLogID(LogID);
                inspectReportList.setReportType(reportNo.substring(0, 1));
                reportLists.add(inspectReportList);
            }
            return reportLists;
        } catch (Exception e) {
            logger.error(e.getMessage());
            return null;
        }
    }

    /**
     * @Description:下载检查结果
     * @param Token 访问口令 NOT NULL
     * @param LogID 机构代码 NOT NULL
     * @param ReportNO 报告编号 NOT NULL
     * @param AppCode 申请机构代码(医院代码)
     * @param ExeCode 指定执行机构代码
     * @param AppBarcode 申请机构条码
     * @param ExBarcode 执行机构条码
     * @param ReportType 报告类型（1-临床检验报告；2-病理组织报告；3-TCT；4-微生物报告；9-其他报告）
     * @Author: XCK
     * @Date: 2019/5/22
     * @return List<ExamInspectReport>
     */
    public static List<ExamInspectReport> downLoadResult(String Token, String LogID, String ReportNO, String AppCode, String ExeCode,
                                         String AppBarcode, String ExBarcode, String ReportType) {
        List<ExamInspectReport> reportList = null;
        try {
            Map<String, String> reqData = new HashMap<>();
            reqData.put("Token", Token);
            reqData.put("LogID", LogID);
            reqData.put("ReportNO", ReportNO);
            reqData.put("AppCode", AppCode);
            reqData.put("ExeCode", ExeCode);
            reqData.put("AppBarcode", AppBarcode);
            reqData.put("ExBarcode", ExBarcode);
            reqData.put("ReportType", ReportType);

            Map<String, Object> resData = LisWebServiceSoap12_Client.sendRequest("DownLoadResult", reqData);
            // 请求响应码不为 “0” （请求失败）
            if(!("0".equals(resData.get("RESULTCODE")))){ return reportList; }

            List<Map<String, Object>> results = (List) resData.get("RESULTS");

            // 判断返回结果集 results 是否为空
            if (CollectionUtils.isEmpty(results)) { return reportList; }

            // 开始解析结果集 results 并返回 “检查报告” + “结果列表” 实体对象集合
            reportList = new ArrayList<>();
            for (Map<String, Object> result : results) {
                String reportNo = (String) result.get("REPORTNO");
                if(StringUtils.isBlank(reportNo)) { continue; }
                ExamInspectReport inspectReport = new ExamInspectReport();
                BeanUtils.populate(inspectReport, result);
                inspectReport.setLogID(LogID);
                reportList.add(inspectReport);

                // 判断返回的 项目结果列表 (ItemResultList) 类型是否为 List（即是否为空）
                if(!(result.get("ITEMRESULTLIST") instanceof List)){ continue; }

                // 开始解析 项目结果列表 ItemResultList
                List<Map<String, Object>> itemResultList = (List) result.get("ITEMRESULTLIST");
                String reportType = reportNo.substring(0,1);
                switch (reportType){
                    case "1":
                        // 临床检验报告
                        List<ExamInspectReportClinic> clinicList = new ArrayList<>();
                        for (Map<String, Object> itemResult : itemResultList) {
                            ExamInspectReportClinic clinic = new ExamInspectReportClinic();
                            BeanUtils.populate(clinic, itemResult);
                            clinicList.add(clinic);
                        }
                        inspectReport.setClinicList(clinicList);
                        break;
                    case "2":
                        // 病理组织报告
                        List<ExamInspectReportPathology> pathologyList = new ArrayList<>();
                        for (Map<String, Object> itemResult : itemResultList) {
                            ExamInspectReportPathology pathology = new ExamInspectReportPathology();
                            BeanUtils.populate(pathology, itemResult);
                            pathologyList.add(pathology);
                            // 病理项目明细结果
                            if(result.get("DETAILITEMLIST") instanceof List){
                                List<ExamInspectReportPathologyDetail> pathologyDetailList = new ArrayList<>();
                                List<Map<String, Object>> detailItemlist = (List) result.get("DETAILITEMLIST");
                                for (Map<String, Object> detailItem : detailItemlist) {
                                    ExamInspectReportPathologyDetail pathologyDetail = new ExamInspectReportPathologyDetail();
                                    BeanUtils.populate(pathologyDetail, detailItem);
                                    pathologyDetailList.add(pathologyDetail);
                                }
                                pathology.setPathologyDetailList(pathologyDetailList);
                            }
                        }
                        inspectReport.setPathologyList(pathologyList);
                        break;
                    case "3":
                        // TCT报告
                        List<ExamInspectReportTct> tctList = new ArrayList<>();
                        for (Map<String, Object> itemResult : itemResultList) {
                            ExamInspectReportTct tct = new ExamInspectReportTct();
                            BeanUtils.populate(tct, itemResult);
                            tctList.add(tct);
                        }
                        inspectReport.setTctList(tctList);
                        break;
                    case "4":
                        // 微生物报告
                        List<ExamInspectReportMicroorganism> microorganismList = new ArrayList<>();
                        for (Map<String, Object> itemResult : itemResultList) {
                            ExamInspectReportMicroorganism microorganism = new ExamInspectReportMicroorganism();
                            BeanUtils.populate(microorganism, itemResult);
                            microorganismList.add(microorganism);
                            // 病理项目明细结果
                            if(result.get("DETAILITEMLIST") instanceof List){
                                List<ExamInspectReportMicroorganismDetail> microorganismDetailList = new ArrayList<>();
                                List<Map<String, Object>> detailItemlist = (List) result.get("DETAILITEMLIST");
                                for (Map<String, Object> detailItem : detailItemlist) {
                                    ExamInspectReportMicroorganismDetail microorganismDetail = new ExamInspectReportMicroorganismDetail();
                                    BeanUtils.populate(microorganismDetail, detailItem);
                                    microorganismDetailList.add(microorganismDetail);
                                }
                                microorganism.setMicroorganismDetailList(microorganismDetailList);
                            }
                        }
                        inspectReport.setMicroorganismList(microorganismList);
                        break;
                }
            }

            return reportList;
        } catch (Exception e) {
            logger.error(e.getMessage());
            return null;
        }
    }

    /**
     * @Description:更新数据状态
     *
     * 检测结果下载成功后更新服务器端数据状态，避免下次重复下载
     *
     * @param Token 访问口令 NOT NULL
     * @param LogID 机构代码 NOT NULL
     * @param ReportNO 报告编号 NOT NULL
     * @param AppCode 申请机构代码
     * @param ExeCode 指定执行机构代码
     * @param AppBarcode 实验室条码
     * @param ExBarcode 医院条码
     * @Author: XCK
     * @Date: 2019/5/22
     * @return boolean
     */
    public static boolean updateStatus(String Token, String LogID, String ReportNO, String AppCode, String ExeCode, String AppBarcode,
                                 String ExBarcode) {
        try {
            Map<String, String> reqData = new HashMap<>();
            reqData.put("Token", Token);
            reqData.put("LogID", LogID);
            reqData.put("ReportNO", ReportNO);
            reqData.put("AppCode", AppCode);
            reqData.put("ExeCode", ExeCode);
            reqData.put("AppBarcode", AppBarcode);
            reqData.put("ExBarcode", ExBarcode);
            Map<String, Object> resData = LisWebServiceSoap12_Client.sendRequest("UpdateStatus", reqData);

            if("0".equals(resData.get("RESULTCODE"))){
                System.out.println("更新服务器端数据状态：" + resData.get("RESULTCONTENT"));
                return true;
            }
        } catch (Exception e) {
            logger.error(e.getMessage());
        }
        return false;
    }

}
